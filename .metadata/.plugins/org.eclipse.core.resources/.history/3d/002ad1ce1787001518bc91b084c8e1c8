/*
	Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
 */



import java.util.*;
public class Solution {
	public class ListNode {
		int val;
		ListNode next;
		ListNode(int x) { val = x; }
	}
	public ListNode mergeKLists(ListNode[] lists) {
		if(lists.length < 1) return null;
		PriorityQueue<ListNode> q = new PriorityQueue<ListNode>(lists.length, new Comparator<ListNode>(){
				public int compare(ListNode a, ListNode b){
					if(a.val > b.val) return 1;
					else if(a.val == b.val) return 0;
					else return -1;
				}
		});
		for(ListNode node:lists){
			if(node != null)
				q.add(node);
		}
		ListNode head = new ListNode(0);
		ListNode curr = head;
		while(q.size() != 0){
			ListNode node = q.poll();
			curr.next = new ListNode(node.val);
		
		}
		
	}
}