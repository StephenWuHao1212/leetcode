/*
	Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

	For example,
	Given the following matrix:
	
	[
	 [ 1, 2, 3 ],
	 [ 4, 5, 6 ],
	 [ 7, 8, 9 ]
	]
	You should return [1,2,3,6,9,8,7,4,5].


	need x and y index to represent the current position of the number
	initialize x and y to be 0
	set up initial x and y index to be 0
	loop:
		if number of rows or number of columns equals to 0,
			return ans
		if number of rows equals to 1
			add the whole row into the ans
			return ans
		else if number of columns equals to 1
			add the whole column into the ans
			return ans
		else
			add a circle into the ans
			update the number of rows and columns
			update the initial x and y
			
*/


import java.util.*;
public class Solution {
    public static List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> ans = new LinkedList<Integer>();
        if(matrix.length == 0) return ans;
        int m = matrix.length;
        int n = matrix[0].length;
        int initialX = 0;
        int initialY = 0;
        int x = 0; int y = 0;
        while(true){
        	if(m == 0 || n == 0) return ans;
        	if(m == 1){
        		for(int i = 0; i < n; i++){
        			ans.add(matrix[x][y + i]);
        		}
        		return ans;
        	}
        	else if(n == 1){
        		for(int i = 0; i < m; i++){
        			ans.add(matrix[x + i][y]);
        		}
        	}
        	else{
        		int i = 0;
        		for(i = 0; i < n; i++){
        			ans.add(matrix[initialX][initialY + i]);
        		}
        		for(i = 0; i < m; i++){
        			ans.add(matrix[initialX + i][n - 1]);
        		}
        	}
        }
    }
}










