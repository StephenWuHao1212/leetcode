/*

a m by n matrix, print every paths from the left top corner to the right bottom corner
only go down or right for every step


backtracing
helper(currentList, totalList, direction, row, col, matrix)
if direction is true, go down
else go right

 */

import java.util.*;
public class Solution{
	public static List<List<Integer>> printPaths(int[][] matrix){
		LinkedList<List<Integer>> totalList = new LinkedList<List<Integer>>();
		LinkedList<Integer> currentList =  new LinkedList<Integer>();
		helper(currentList, totalList, 0,0,matrix);
		return  totalList;
	}
	// row and col is the current index
	public static void helper(LinkedList<Integer> currentList, LinkedList<List<Integer>> totalList, int row, int col, int[][] matrix){
		currentList.add(matrix[row][col]);
		if(row == matrix.length - 1 && col == matrix[0].length - 1) {
			totalList.add(currentList);
			return;
		}
		if(row != matrix.length - 1){
			LinkedList<Integer> listDown = new LinkedList<Integer>();
			listDown.addAll(currentList);
			helper(listDown, totalList, row + 1, col, matrix);
		}
		if(col != matrix[0].length - 1){
			LinkedList<Integer> listRight = new LinkedList<Integer>();
			listRight.addAll(currentList);
			helper(listRight, totalList, row, col + 1, matrix);
		}

	}
	
	public static void main(String[] args){
		int[][] nums = {{1,2,3}, {4,5,6},{7,8,9}};
		System.out.println(printPaths(nums));
	}
}